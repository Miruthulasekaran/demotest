import Header from 'components/Headers/Header';
import React, { useState, useEffect, useRef } from 'react'
import {
  Button,
  Card,
  CardHeader,
  CardBody,
  FormGroup,
  Form,
  Input,
  Container,
  Row,
  Col,
  DropdownMenu,
  DropdownItem,
  UncontrolledDropdown,
  DropdownToggle,
} from "reactstrap";

import { useHistory } from 'react-router-dom';
export default function DeviceCategoryEdit() {
  const [CategoryArr, setCategoryArr] = useState([])
  const [deviceCategory, setdeviceCategory] = useState([])
  const [imageCategory, setimageCategory] = useState()
  const [categorname, setcategorname] = useState("")
  const [device, setdevice] = useState("")
  const [dataprofile, setdataprofile] = useState("")
  const [devicealarm, setdevicealarm] = useState("")
  const [categoryAdd, setcategoryAdd] = useState([])
  const [deviceprofileArray, setdeviceprofileArray] = useState([])
  const [OnDeviceDataProfile, setOnDeviceDataProfile] = useState([])
  const [alarmArray, setalarmArray] = useState([])
  const [idds, setidds] = useState()
  const [edit1, setEdit1] = useState()
  const [idcat, setidcat] = useState(0)
  const [imageset, setimage] = useState()
  useEffect(() => {
    var url = window.location.pathname
    var idds = url.substring(url.lastIndexOf('/') + 1);

    console.log("last one", idds)


    setidds(idds)
    fetch(`http://127.0.0.1:8088/api/v1/device-category/${idds}`).then((result) => {
      result.json().then((resp) => {
        // movieparsed = JSON.parse(resp);
        setdeviceCategory(resp);
        // setalarmArray([resp]);
        // setOnDeviceDataProfile([resp]);
        // setdeviceprofileArray([resp]);

        console.log("response-cat", resp);
        setdeviceprofileArray(resp.device_profile)
        setOnDeviceDataProfile(resp.device_data_profile)
        setalarmArray(resp.global_alarm_rule)
        setcategorname(resp.category_name)
        setimage(resp. device_image)
        console.log("response-image", resp.device_image)
        // setimageCategory(resp.device_image)

        setimageCategory(URL.createObjectURL(resp.device_image))
        // console.log("responseimg",(URL.createObjectURL(resp.device_image)))

        // setProfile(resp.device_profile_name)
        // setArr(resp.custom_data)
        // console.log("response array", Arr)

      })
    })
  }, [])
  const [deviceprofile, setdeviceprofile] = useState([])
  useEffect(() => {
    fetch("http://192.168.0.138:8088/api/v1/device-profile").then((result) => {
      result.json().then((resp) => {
        console.log("response", resp);
        setdeviceprofile(resp);
        console.log("device profile response", resp)
      })
    })
  }, [])

  const [devicedataprofile, setdevicedataprofile] = useState([])
  useEffect(() => {
    fetch("http://192.168.0.138:8088/api/v1/device-data-profile", {

    }).then((result) => {
      result.json().then((resp) => {
        setdevicedataprofile(resp);
        console.log("device data profile", resp);
      })
    })
  }, [])

  const [alarmrule, setalarmrule] = useState([])
  useEffect(() => {
    fetch("http://192.168.0.138:8088/api/v1/alarm-rule", {

    }).then((result) => {
      result.json().then((resp) => {
        setalarmrule(resp);
        console.log("alarm-rule", resp);
      })
    })
  }, [])


  let categoryAdding = () => {
    let Finddeviceprofile = deviceprofile.find((value, i) => value.device_profile_name === device);

    console.log("Finddeviceprofile", Finddeviceprofile)

    let creatdevice = { deviceprofileId: Finddeviceprofile.device_profile_id, deviceprofileName: Finddeviceprofile.device_profile_name, deviceprofilecustomdata: Finddeviceprofile.custom_data }

    console.log("creatdevice", creatdevice)

    setdeviceprofileArray((deviceOlddata) => {
      // FinalObj.DeviceProfile = deviceOlddata
      return [...deviceOlddata, creatdevice]

    })

    console.log("deviceprofileArray", deviceprofileArray)

    let FinddeviceDataprofile = devicedataprofile.find((value, i) => value.data_profile_name === dataprofile);

    console.log("devicedataprofile", FinddeviceDataprofile);

    let createDatadevice = { deviceDataprofileId: FinddeviceDataprofile.device_data_profile_id, deviceprofileName: FinddeviceDataprofile.data_profile_name, deviceprofilecustomdata: FinddeviceDataprofile.custom_data }

    console.log("createDatadevice", createDatadevice);

    setOnDeviceDataProfile((OldData) => {
      return [...OldData, createDatadevice]

    })

    console.log("OnDeviceDataProfile", OnDeviceDataProfile)
    let Findalarm = alarmrule.find((value, i) => value.alarm_name === devicealarm);
    console.log("Findalarm", Findalarm);
    let createAlarm = { deviceAlarmId: Findalarm.global_alarm_id, deviceAlarmName: Findalarm.alarm_name, deviceAlarmcustomdata: Findalarm.custom_data }

    console.log("createAlarm", createAlarm)


    setalarmArray((oldvalues) => {
      return [...oldvalues, createAlarm]

    })
  }


  let ondeleteprofile = (e) => {

    setdeviceprofileArray((EditArray) => {

      return EditArray.filter((_, i) => i !== e);
    });

  }

  let ondeleteDataProfile = (e) => {

    setOnDeviceDataProfile((EditArray) => {

      return EditArray.filter((_, i) => i !== e);
    });

  }

  let ondeletealarm = (e) => {


    setalarmArray((EditArray) => {

      return EditArray.filter((_, i) => i !== e);
    });

  }
  let backendData = () => {

    fetch(`http://127.0.0.1:8088/api/v1/edit-device-category/${idds}`, {
      method: 'PATCH',
      headers: { "content-type": "application/json" },
      body: JSON.stringify(edit1)
    }).then((result) => {
      result.json().then((resp) => {
        // console.log("idds", idds);
        console.log("respedit", resp);
        history.push('/admin/DeviceCategory');

      })
    })
  }
  useEffect(() => {
    // setEdit1({DataProfileFields: OnDeviceDataProfile, Units: OnUnits, DataType: OnDataTypevalue, AddIcons: AddIcons, IconName: IconName1  })
    setEdit1({
      created_by: "test",
      updated_by: "test",
      category_name: categorname,
      device_image: imageCategory,
      device_image: imageset,
      device_profile: deviceprofileArray,
      device_data_profile: OnDeviceDataProfile,
      global_alarm_rule: alarmArray
    })

  }, [categorname, imageCategory, imageset,OnDeviceDataProfile, alarmArray, deviceprofileArray]);
  const history = useHistory();
  function cancel() {
    history.push('/admin/DeviceCategory');
  }
  return (
    <>

      <Header />
      <Container className="mt--5" fluid>
        {/* <h2 className=" text-center mb-4">
          Edit Device Category
        </h2> */}
        <Row>
          <Col className="order-xl-1" xl="12">
            <Card className="bg-secondary shadow">
              <CardBody>
                <Form>
                  <div className="pl-lg-4">
                    <Row>
                      <Col md="6">
                        <FormGroup>
                          <label
                            className="form-control-label"
                            htmlFor="input-address"
                          >
                            Upload Image
                          </label>
                          <div>
                            <div class="">
                              <div >
                                <input type="file" onChange={e => setimageCategory(URL.createObjectURL(e.target.files[0]))
                                }
                                  className="form-control" placeholder='Enter the Icon name' id="Form" />
                              </div>
                            </div>  </div>

                        </FormGroup>


                      </Col>
                      <Col lg="6">
                        <FormGroup>
                          <label
                            className="form-control-label"
                            htmlFor="input-city"
                          >
                            Category Name
                          </label>
                          <Input
                            className="form-control-alternative"
                            onChange={e => setcategorname(e.target.value)}
                            value={categorname}
                            id="input-city"
                            placeholder=" Enter Category Name"
                            type="text"

                          />
                        </FormGroup>

                      </Col>

                    </Row>
                    <Row className='mt-3'>
                      <Col lg="4">
                        <FormGroup>
                          <label
                            className="form-control-label"
                            htmlFor="input-country"
                          >
                            Device profile
                          </label>


                          <Input type="select" value={device} onChange={e => setdevice(e.target.value)} className='text-dark' name="select" id="exampleSelect">
                            <option value="" selected disabled>Select Device Profile</option>
                            {deviceprofile.map((item, index) => {
                              return <option key={index} value={item.device_profile_name} className='text-dark'>{item.device_profile_name}</option>
                            })
                            }
                          </Input>
                        </FormGroup>
                      </Col>
                      <Col lg="4">
                        <FormGroup>
                          <label
                            className="form-control-label"
                            htmlFor="input-country"
                          >
                            Device Data Profile
                          </label>
                          <Input type="select" value={dataprofile} onChange={e => setdataprofile(e.target.value)} className='text-dark' name="select" id="exampleSelect">
                            <option value="" selected disabled>Select Device Data Profile</option>
                            {devicedataprofile.map((item, index) => {
                              return <option key={index} value={item.data_profile_name} className='text-dark'>{item.data_profile_name}</option>
                            })
                            }
                          </Input>
                        </FormGroup>
                      </Col>
                      <Col lg="4">
                        <FormGroup>
                          <label
                            className="form-control-label"
                            htmlFor="input-country"
                          >
                            Global Alarm Rules
                          </label>


                          <Input type="select" value={devicealarm} onChange={e => setdevicealarm(e.target.value)} className='text-dark' name="select" id="exampleSelect">
                            <option value="" selected disabled>Select Alarm</option>
                            {alarmrule.map((item, index) => {
                              return <option key={index} value={item.alarm_name} className='text-dark'>{item.alarm_name}</option>
                            })
                            }
                          </Input>
                        </FormGroup>
                      </Col>
                    </Row>

                  </div>
                </Form>
                <Card>
                  <CardBody>
                    <FormGroup>
                      <Row className=''>
                        <Col>
                          <Button color="primary" size="sm" onClick={categoryAdding}>Add</Button>
                        </Col>
                      </Row>
                      <div className="row text-center">
                      <div className="col-3 text-center text-justify">
                            <img style={{ height: "7rem" }} src={imageset} />
                          </div>
                        <div className="col-3">
                          <br />
                          {deviceprofileArray.map((deviceProfile, index) => {
                            return <div className="row">
                              <label key={index} class="form-label text-dark">{deviceProfile.deviceprofileName}</label>

                              <span onClick={() => { ondeleteprofile(index) }} > <i class="fa fa-trash text-danger ml-3" ></i></span>
                            </div>
                          })
                          }
                        </div>
                        <div className="col-3">
                          <br />
                          {OnDeviceDataProfile.map((deviceDataProfile, index) => {
                            return <div className="row">
                              <label key={index} class="form-label text-dark">{deviceDataProfile.deviceprofileName}</label>
                              <span onClick={() => { ondeleteDataProfile(index) }}> <i class="fa fa-trash text-danger ml-3"  ></i></span>


                            </div>
                          })
                          }
                        </div>
                        <div className="col-3">
                          <br />
                          {alarmArray.map((alarm, index) => {
                            return <div className="row">
                              <label key={index} class="form-label text-dark">{alarm.deviceAlarmName}</label>
                              <span onClick={() => { ondeletealarm(index) }}><i class="fa fa-trash text-danger ml-3"></i></span>

                            </div>
                          })
                          }
                        </div>
                      </div>

                    </FormGroup>
                    {/* <div >
                  <Row className=''>
                    <Col>
                      {updateddevice ? <Button color="success" className='btn-warning' size="sm" onClick={categoryAdd}>Add</Button> : <Button color="success" className='btn-primary' size="sm" onClick={updateDevice}>update</Button>}
                    </Col>
                  </Row>
                  <Row className=''>
                    <Col>
                      <Button color="success" className='btn-success float-right' size="sm" onClick={OnSumbit}>Submit</Button>
                    </Col>
                  </Row>
                </div> */}
                  </CardBody>
                </Card>
                <div >

                  <Row className='float-right'>
                    <Col>
                      <Button color="success" className='btn-success ' size="sm" onClick={backendData}>Submit</Button>
                      <Button color="danger" className='btn-success ' size="sm" onClick={cancel}>cancel</Button>
                    </Col>
                  </Row>
                </div>
              </CardBody>
            </Card>
          </Col>
        </Row>
      </Container>

    </>
  )
}
