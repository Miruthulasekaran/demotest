import Header from 'components/Headers/Header';
import React, { useState, useEffect, useRef, useCallback } from 'react'
import {
  Button,
  Card,
  CardHeader,
  CardBody,
  FormGroup,
  Form,
  Input,
  Container,
  Row,
  Col,
  DropdownMenu,
  DropdownItem,
  UncontrolledDropdown,
  DropdownToggle,
} from "reactstrap";

import { useHistory } from 'react-router-dom';
export default function DeviceCategoryAdd() {

  const [updateddevice, setupdateddevice] = useState(true)
  const [deviceprofile, setdeviceprofile] = useState([])
  useEffect(() => {
    fetch("http://192.168.0.138:8088/api/v1/device-profile").then((result) => {
      result.json().then((resp) => {
        console.log("response", resp);
        setdeviceprofile(resp);
        console.log("device profile response", resp)
      })
    })
  }, [])

  const [devicedataprofile, setdevicedataprofile] = useState([])
  useEffect(() => {
    fetch("http://192.168.0.138:8088/api/v1/device-data-profile", {

    }).then((result) => {
      result.json().then((resp) => {
        setdevicedataprofile(resp);
        console.log("device data profile", resp);
      })
    })
  }, [])

  const [alarmrule, setalarmrule] = useState([])
  useEffect(() => {
    fetch("http://192.168.0.138:8088/api/v1/alarm-rule", {

    }).then((result) => {
      result.json().then((resp) => {
        setalarmrule(resp);
        console.log("alarm-rule", resp);
      })
    })
  }, [])

  const [imageset, setimage] = useState()
  let setonChangeImage = (e) => {
    // e.preventDefault();
    console.log("iconimage", e.target.value)
    // seticonimg(e.target.file)
    setimage(URL.createObjectURL(e.target.files[0]))
  };
  // onChange={e => setOnDataTypevalue(e.target.value)} 
  const [Categoryname, setCategoryname] = useState("")
  const [device, setdevice] = useState("")
  const [data, setdata] = useState("")
  const [alarm, setalarm] = useState("")
  const [Paramvalue, setParamValue] = useState([])
  const [CreateObject, setCreateObject] = useState([])
  const [deviceprofileArray, setdeviceprofileArray] = useState([])
  const [deiveprofileTemp, setdeiveprofileTemp] = useState("")
  const [createObj, setcreateObj] = useState()
  const [EditId, setEditId] = useState()
  const [OnDeviceDataProfile, setOnDeviceDataProfile] = useState([])
  const [id, setid] = useState(0);
  const [FinalArr, setFinalArr] = useState([])
  const [alarmArray, setalarmArray] = useState([])
  const [FinalObj, SetFinalObj] = useState()
  const history = useHistory();
  let OnSumbit = () => {

    console.log("OnSumbit")

    // let FinalObj = { DeviceProfile: deviceprofileArray, DeviceDataProfile: OnDeviceDataProfile }

    fetch("http://192.168.0.138:8088/api/v1/device-category", {
      method: 'POST',
      headers: { "content-type": "application/json" },
      body: JSON.stringify(FinalObj)
    }).then((result) => {
      result.json().then((resp) => {
        console.log("resp", resp);
        // navigate('/OrganizationProfile');
        // history('/OrganizationProfile').then()
        console.log("success")
        console.log("resp", resp);

        history.push('/admin/DeviceCategory');
      })
    })

  }


  useEffect(() => {

    SetFinalObj({
      created_by: "test",
      updated_by: "test",
      category_name: Categoryname,
      device_image: imageset,
      device_profile: deviceprofileArray,
      device_data_profile: OnDeviceDataProfile,
      global_alarm_rule: alarmArray
    })


  }, [deviceprofileArray, OnDeviceDataProfile, alarmArray])


  let categoryAdd = (e) => {

    setid(id => id + 1);

    let Finddeviceprofile = deviceprofile.find((value, i) => value.device_profile_name === device);

    console.log("Finddeviceprofile", Finddeviceprofile)

    let creatdevice = { deviceprofileId: Finddeviceprofile.device_profile_id, deviceprofileName: Finddeviceprofile.device_profile_name, deviceprofilecustomdata: Finddeviceprofile.custom_data }

    console.log("creatdevice", creatdevice)

    setdeviceprofileArray((deviceOlddata) => {
      // FinalObj.DeviceProfile = deviceOlddata
      return [...deviceOlddata, creatdevice]

    })

    console.log("deviceprofileArray", deviceprofileArray)

    // For Device Profile ends here 

    // for Devcice Data Profile starts here
    let FinddeviceDataprofile = devicedataprofile.find((value, i) => value.data_profile_name === data);

    console.log("devicedataprofile", FinddeviceDataprofile);

    let createDatadevice = { deviceDataprofileId: FinddeviceDataprofile.device_data_profile_id, deviceprofileName: FinddeviceDataprofile.data_profile_name, deviceprofilecustomdata: FinddeviceDataprofile.custom_data }

    console.log("createDatadevice", createDatadevice);

    setOnDeviceDataProfile((OldData) => {
      return [...OldData, createDatadevice]

    })

    console.log("OnDeviceDataProfile", OnDeviceDataProfile)
    let Findalarm = alarmrule.find((value, i) => value.alarm_name === alarm);

    let createAlarm = { deviceAlarmId: Findalarm.global_alarm_id, deviceAlarmName: Findalarm.alarm_name, deviceAlarmcustomdata: Findalarm.custom_data }

    console.log("createAlarm", createAlarm)


    setalarmArray((oldvalues) => {
      return [...oldvalues, createAlarm]

    })
    setdevice("")
    setdata("")
    setalarm("")
  }
  let deviceprofileedit = (e) => {
    setdeiveprofileTemp(e)
    let Finddeviceprofile = deviceprofileArray.find((value) => value.deviceprofileName === e);
    console.log("e", Finddeviceprofile);
    let FinddeviceDataprofile = devicedataprofile.find((value) => value.data_profile_name === e);
    setupdateddevice(false)
  }

  let updateDevice = () => {

    console.log("device", device)

    let Finddeviceprofile = deviceprofile.find((value) => value.device_profile_name === device);

    console.log("findprofile", Finddeviceprofile)

    setEditId(Finddeviceprofile.device_profile_id)
    setdevice(Finddeviceprofile.deviceprofileName)

    let setcreateObj = { deviceprofileId: Finddeviceprofile.device_profile_id, deviceprofileName: Finddeviceprofile.device_profile_name, deviceprofilecustomdata: Finddeviceprofile.custom_data }

    console.log("creating", setcreateObj)

    setdeviceprofileArray(deviceprofileArray.map((element) => {
      // console.log("element",element.deviceprofileName)

      if (element.deviceprofileName === deiveprofileTemp) {

        console.log("element", element)
        console.log("setcreateObj", setcreateObj)

        return { ...element, deviceprofileId: Finddeviceprofile.device_profile_id, deviceprofileName: Finddeviceprofile.device_profile_name, deviceprofilecustomdata: Finddeviceprofile.custom_data }

      }
      // console.log("sorry")
      return element;
    }))

    console.log("element", deviceprofileArray)
  }

  useEffect(() => {

    console.log("deviceprofileArray", deviceprofileArray);

    console.log("deviceDataprofile", OnDeviceDataProfile)

    console.log("alarmArray", alarmArray)
    // console.log("FinalArr", )
    // console.log("FinalArr", FinalArr)

    // console.log("Array", FinalArr);



  }, [deviceprofileArray, OnDeviceDataProfile, alarmArray])

  let ondeleteprofile = (e) => {

    setdeviceprofileArray((EditArray) => {

      return EditArray.filter((_, i) => i !== e);
    });

  }

  let ondeleteDataProfile = (e) => {

    setOnDeviceDataProfile((EditArray) => {

      return EditArray.filter((_, i) => i !== e);
    });


  }

  let ondeletealarm = (e) => {


    setalarmArray((EditArray) => {

      return EditArray.filter((_, i) => i !== e);
    });

  }

  //  let 
  function cancel() {
    history.push('/admin/DeviceCategory');
  }

  return (
    <>
      <Header />
      <Container className="mt--5" fluid>
        {/* <h2 className=" text-center mb-4">
          Add Device Category
        </h2> */}
        <Row>
          <Col className="order-xl-1" xl="12">
            <Card className="bg-secondary shadow">
              <CardBody>
                <Form>
                  <div className="pl-lg-4">
                    <Row>
                      <Col md="6">
                        <FormGroup>
                          <label
                            className="form-control-label"
                            htmlFor="input-address"
                          >
                            Upload Image
                          </label>
                          {/* <div class="dropzone dropzone-single" data-toggle="dropzone" data-dropzone-url="http://">
                            <div class="fallback">
                              <div class="custom-file">
                                <input type="file" class="custom-file-input" onChange={setonChangeImage} id="dropzoneBasicUpload" />
                                <label class="custom-file-label" for="dropzoneBasicUpload">Choose file</label>
                              </div>
                            </div> 
                             </div> */}

                          {/* <label for="exampleSelect">Icon name</label> */}
                          <input type="file" onChange={setonChangeImage} className="form-control" placeholder='Enter the Icon name' id="Form" />

                        </FormGroup>


                      </Col>
                      <Col lg="6">
                        <FormGroup>
                          <label
                            className="form-control-label"
                            htmlFor="input-city"
                          >
                            Category Name
                          </label>
                          <Input
                            className="form-control-alternative"
                            onChange={e => setCategoryname(e.target.value)}
                            value={Categoryname}
                            id="input-city"
                            placeholder=" Enter Category Name"
                            type="text"

                          />
                        </FormGroup>

                      </Col>

                    </Row>
                    <Row className='mt-3'>
                      <Col lg="4">
                        <FormGroup>
                          <label
                            className="form-control-label"
                            htmlFor="input-country"
                          >
                            Device profile
                          </label>

                          <Input type="select" value={device} onChange={e => setdevice(e.target.value)} className='text-dark' name="select" id="exampleSelect">
                            <option value="" selected disabled>Select Device Profile</option>
                            {deviceprofile.map((item, index) => {
                              return <option key={index} value={item.device_profile_name} className='text-dark'>{item.device_profile_name}</option>
                            })
                            }
                          </Input>

                        </FormGroup>
                      </Col>
                      <Col lg="4">
                        <FormGroup>
                          <label
                            className="form-control-label"
                            htmlFor="input-country"
                          >
                            Device Data Profile
                          </label>

                          <Input type="select" value={data} onChange={e => setdata(e.target.value)} className='text-dark' name="select" id="exampleSelect">
                            <option value="" selected disabled>Select Device Data Profile</option>
                            {devicedataprofile.map((item, index) => {
                              return <option key={index} value={item.data_profile_name} className='text-dark'>{item.data_profile_name}</option>
                            })
                            }
                          </Input>


                        </FormGroup>
                      </Col>
                      <Col lg="4">
                        <FormGroup>
                          <label
                            className="form-control-label"
                            htmlFor="input-country"
                          >
                            Global Alarm Rules
                          </label>

                          <Input type="select" value={alarm} onChange={e => setalarm(e.target.value)} className='text-dark' name="select" id="exampleSelect">
                            <option value="" selected disabled>Select Alarm</option>
                            {alarmrule.map((item, index) => {
                              return <option key={index} value={item.alarm_name} className='text-dark'>{item.alarm_name}</option>
                            })
                            }
                          </Input>

                        </FormGroup>
                      </Col>
                    </Row>

                  </div>
                </Form>
                <div >

                </div>





                <Card>
                  <CardBody>
                    <FormGroup>

                      <div >
                        <Row className='mt--4'>
                          <Col>
                            {updateddevice ? <Button color="primary" className='' size="sm" onClick={categoryAdd}>Add</Button> : <Button color="primary" size="sm" onClick={updateDevice}>update</Button>}
                          </Col>
                        </Row>
                        <div className="row text-center">
                          <div className="col-3 text-center text-justify">
                            <img style={{ height: "7rem" }} src={imageset} />
                          </div>
                          <div className="col-3">
                            <br />
                            {deviceprofileArray.map((deviceProfile, index) => {
                              return <div className="row">

                                <label key={index} class="form-label text-dark text-justify">{deviceProfile.deviceprofileName}</label>

                                <span onClick={() => { ondeleteprofile(index) }}> <i class="fa fa-trash text-danger ml-3" ></i></span>
                              </div>
                            })
                            }
                          </div>
                          <div className="col-3">
                            <br />
                            {OnDeviceDataProfile.map((deviceDataProfile, index) => {
                              return <div className="row">
                                <label key={index} class="form-label text-dark text-justify">{deviceDataProfile.deviceprofileName}</label>
                                <span onClick={() => { ondeleteDataProfile(index) }}> <i class="fa fa-trash text-danger ml-3"  ></i></span>


                              </div>
                            })
                            }
                          </div>
                          <div className="col-3">
                            <br />
                            {alarmArray.map((alarm, index) => {
                              return <div className="row">
                                <label key={index} class="form-label text-dark text-justify">{alarm.deviceAlarmName}</label>
                                <span onClick={() => { ondeletealarm(index) }} ><i class="fa fa-trash text-danger ml-3"></i></span>


                              </div>
                            })
                            }
                          </div>

                        </div>
                        <Row className='float-right mb-5'>
                          <Col>
                            <Button color="success" className='btn-success' size="sm" onClick={OnSumbit}>Submit</Button>
                            <Button color="danger" className='btn-success ' size="sm" onClick={cancel}>cancel</Button>
                          </Col>
                        </Row>
                      </div>
                    </FormGroup>

                  </CardBody>
                </Card>
              </CardBody>
            </Card>
          </Col>
        </Row>
      </Container>
    </>
  )
}